/*
This file holds definitions of transactions and operations that can be executed.
The actual vector will pre-process each of these transactions into a simpler read/write set.
*/
#ifndef TRANSACTION_HPP
#define TRANSACTION_HPP

#include <atomic>
#include <cstddef>
#include <cstdio>
#include <cstring>
#include <map>
#include <iostream>
#include <ostream>
#include <string>
#include <unordered_map>

#include "define.hpp"
#include "memAllocator.hpp"

typedef std::unordered_map<std::string, void *> valMap;

template <class T, size_t S>
class Page;

class RWSet;
#ifdef BOOSTEDVEC
class BoostedElement;
#endif

// A standard, user-generated operation.
// Works with values of type T.
struct Operation
{
	// A high-level operation supported within a transaction.
	enum OpType
	{
		// Write to a position relative to the current size.
		// Ignores bounds checking, since size reading must be part of the transaction.
		pushBack,
		// Read from a position relative to the current size.
		// Ignores bounds checking, since size reading must be part of the transaction.
		popBack,
		// Ensure enough space has been allocated.
		reserve,
		// Read at an absolute position in the vector.
		// Can fail bounds checking.
		read,
		// Write at an absolute position in the vector.
		// Can fail bounds checking.
		write,
		// Simillar to read, but always at the size index (probably 1?).
		// Returned answer can be offset by a transaction's push and pop ops.
		size,
	};

	// The type of operation being performed.
	OpType type;
	// The index being affected by the operation.
	// Only used for read and write.
	// Also used as the value for size, mostly because it's a convienient and otherwise unused integer.
	size_t index;
	// The value being written.
	// Used for push and write.
	// Pop implicitly writes an unset value for bounds checking.
	VAL val;

	void print();
};

// This is the descriptor generated by the programmer.
// This will be converted into an internal transaction to run on the shared datastructure.
struct Desc
{
#ifndef BOOSTEDVEC
	// The status of a transaction.
	enum TxStatus
	{
		active,
		committed,
		aborted
	};

	// A function pointer. This function forms the transaction.
    // The function must be deterministic and operate thread-locally.
    // The local map can be used to pass in thread-local variables.
    bool (*func)(Desc *desc, valMap *localMap);
    // Write variables to this input map to copy them into the function.
    valMap *inputMap;
    // When the function completes, the output is copied here.
    valMap *outputMap;

	// The status of the transaction.
	std::atomic<TxStatus> status;

	// An array of values returned by each insert, delete, and remove.
    // These can be used in helping to reduce redundant work.
    std::atomic<VAL> *returnValues;
#else
	RWSet *set;
	// A list of locks aquired that must be released when the transaction finishes.
	std::vector<BoostedElement *> locks;
#endif

	// Descriptor constructor.
    // Assigns a descriptor function, an input map, and an output map.
	Desc(bool (*func)(Desc *desc, valMap *localMap), valMap *inMap, valMap *outMap, size_t size);
	~Desc();

	// Print out the contents of the vector at a given time.
	// This function is not atomic unless the transaction has committed or aborted.
	void print();
};

#endif